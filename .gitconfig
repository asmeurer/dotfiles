[user]
	name = Aaron Meurer
	email = asmeurer@gmail.com
# For Secretive, this should be a symlink to the signing key
	signingkey = ~/.ssh/ssh_signing.pub

[color]
    diff  = auto
    status= auto
    branch= auto
    interactive = true

[color "diff"]
    new = white
[alias]
    ci = commit --interactive
    di = diff --color-words
    st = status
    # Automatically checkout username:branch as copied from GitHub
    co = "!bash -c ': git branch ; if [ \"$#\" -eq 1 ] && echo \"$1\" | grep -qE \"^[^/:]+:.+\\$\"; then IFS=: read -r remote branch <<<\"$1\"; origin_url=$(git remote get-url origin); repo_name=$(basename -s .git \"$origin_url\"); git remote get-url \"$remote\" 2>/dev/null || git remote add \"$remote\" \"git@github.com:$remote/$repo_name.git\"; if git fetch \"$remote\" \"$branch\"; then local_branch=\"${remote}-${branch//\\//-}\"; git show-ref --verify --quiet \"refs/heads/$local_branch\" && git checkout \"$local_branch\" || git checkout -b \"$local_branch\" \"$remote/$branch\"; else echo \"Error: Remote branch $remote:$branch not found.\"; fi; else git checkout \"$@\"; fi' -"
    # Push the current branch. If remote is not set, set and track to github.
    pu = "!: git branch ; f() {\\\n    branch=\"$(git rev-parse --abbrev-ref HEAD)\"; \\\n    remote=\"$(git config --get branch.$branch.remote)\"; \\\n    if [ -z \"$remote\" ]; then \\\n        git push -u github \"$branch\" \"${@}\"; \\\n    else \\\n        git push \"$remote\" \"$branch\" \"${@}\"; \\\n    fi; \\\n}; f"
    pu-all = push github :
    logl = log --pretty=oneline --abbrev-commit
    gr = grep -i --color -n -E
    backup = !git-backup.sh
    backups = !git fsck --unreachable | grep commit | cut -d' ' -f3 | xargs git log --merges --no-walk --grep='Backup Commit' --stat
    back = backup
    fe = fetch --all
    weekreport = shortlog --since=1.weeks --author=asmeurer
    dayreport = shortlog --since=1.days --author=asmeurer
    br = branch
    detach = !git checkout $(git rev-parse HEAD)
    bl = blame -CCC -M
    lg = log --graph --topo-order --use-mailmap --stat --decorate
    sw = show --color-words
    psh = !git pull --no-edit && git push
    com = commit
    dif = diff
    difff = diff
    iff = diff
    idff = diff
    DIFF = diff
    dff = diff
    pul = pull
    pulll = pull
    shwo = show
    how = show
    pusho = push --set-upstream origin HEAD
    reset--hard = !git backup && git reset --hard
    res--hard = !git backup && git reset --hard
    masteralias = symbolic-ref refs/heads/master refs/heads/main
    mainalias = symbolic-ref refs/heads/main refs/heads/master

[branch]
    sort = committerdate
[i18n]
    commitEncoding = utf-8
[push]
    default = tracking
[github]
    user = asmeurer
[rerere]
    enabled = true

[credential]
	helper = osxkeychain
[core]
    precomposeunicode = true
[pager]
    log = ~/Documents/git/contrib/diff-highlight/diff-highlight | less
    show = ~/Documents/git/contrib/diff-highlight/diff-highlight | less
    diff = ~/Documents/git/contrib/diff-highlight/diff-highlight | less
    branch = false
    tag = false
[interactive]
    diffFilter = ~/Documents/git/contrib/diff-highlight/diff-highlight
    singleKey = true
# [gpg]
# 	program = krgpg
[commit]
	gpgSign = true
[tag]
	forceSignAnnotated = true

# [remote "origin"]
# 	fetch = +refs/pull/*/head:refs/remotes/origin/pr/*

[filter "lfs"]
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
	clean = git-lfs clean -- %f

# https://www.reddit.com/r/emacs/comments/4j4rle/i_figure_it_out_how_to_use_emacsclient_as_gits/
# [merge]
#     tool = emacsclient
[mergetool "emacsclient"]
    cmd = emacsclient -nw -c -a \"\" --eval \"(my/emerge \\\"$LOCAL\\\" \\\"$REMOTE\\\" \\\"$BASE\\\" \\\"$OUTPUT\\\")\"
[pull]
	rebase = false

[stash]
    showPatch = true

# Requires git 2.34
# [help]
#     autoCorrect = prompt

# Requires git 2.34
# [gpg]
# 	format = ssh

[mergetool]
	keepBackup = false
[submodule]
	recurse = true
[fetch]
	parallel = 0
[gpg]
	format = ssh
[gpg "ssh"]
# See https://docs.gitlab.com/ee/user/project/repository/signed_commits/ssh.html#verify-commits-locally
	allowedSignersFile = ~/.ssh/allowed_signers
